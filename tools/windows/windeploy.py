#!/usr/bin/env python3

from xml.dom.minidom import getDOMImplementation
import uuid
import subprocess
import hashlib
import os
import pathlib

# Converts any string identifier into a valid WiX Id, that is:
# - only contain ASCII characters A-Z, a-z, digits, underscores, or period,
# - begin with either a letter or an underscore
# - is 72 characters or less
# - is 57 characters or less if it is an Icon Id.
#
def encodeId(s):
    return "_" + hashlib.md5(s.encode('utf-8')).hexdigest()

# This is a convenient class to generate a wxs file to be compiled
# with WiX. Traditionally, these are generated by using WiX tools such
# as 'heat', but we prefer the flexibility of a real programming language
# such as Python for this.
#
# Note that this is just a first iteration, and the API isn't that
# nice for now. In the future, we might want to have a more user
# friendly API with more classes, in order to do things like:
#
#   cmp = dir.createComponent("MyComponent")
#
# instead of:
#
#   cmp = wix.createChild(dir, "Component", [
#       ("Id", "MyComponent"),
#       ("Guid", wix.staticGuid("Component/MyComponent"))])
#
# Note on "Id" identifiers: for the most part, we automatically generate
# them from the other arguments we have. We convert special characters into
# underscore, due to the following constraints:
#
#
class Wix:

    # Creates a new Wix XML document with the following automatically
    # generated WixElements:
    # - wix.root: the root Wix element
    # - wix.product: the Product element
    # - wix.package: the Package element
    # - wix.media: the Media element
    #
    # And the following directories:
    # - wix.targetDirectory: the root of the selected install disk (e.g., "C:")
    # - wix.programFilesDirectory: "Program Files" directory
    # - wix.manufacturerDirectory: "Program Files\[Manufacturer]"
    # - wix.installDirectory:      "Program Files\[Manufacturer]\[ProductName]"
    # - wix.startupMenuDirectory:  Windows' startup menu
    # - wix.desktopDirectory:      Windows' desktop
    #
    def __init__(self, name, version, manufacturer, sourceDir):
        self.name = name
        self.version = version
        self.manufacturer = manufacturer
        self.sourceDir = sourceDir

        # Create XML document.
        #
        domImplementation = getDOMImplementation()
        self.domDocument = domImplementation.createDocument(None, "Wix", None)

        # Get Wix root element and set its xmlns attribute.
        #
        self.root = WixElement(self.domDocument.documentElement, self, "")
        self.root.setAttribute("xmlns", "http://schemas.microsoft.com/wix/2006/wi")

        # Add product. Note that we regenerate its ProductCode GUID
        # (= 'Id' attribute) when the version change since we consider all
        # changes of version to be "Major Upgrades" in MSI terminology. We need
        # this since components may be added, moved or removed even when going
        # from VGC 2020.0 to VGC 2020.1. Also, we desire that the name of our
        # MSI file changes in this case, and it is a Microsoft requirement to
        # keep the same MSI filename during a "Minor Upgrade" or "Small Uprade".
        #
        # TODO: prettify display name to something like:
        #   VGC Illustration Daily Beta 2019-05-27 R2
        #
        self.product = self.root.createChild("Product", [
            ("Name", name + " " + version),
            ("Id", self.dynamicGuid("Product/ProductCode")),
            ("UpgradeCode", self.staticGuid("Product/UpgradeCode")),
            ("Language", "1033"),
            ("Codepage", "1252"),
            ("Version", version),
            ("Manufacturer", manufacturer)])

        # Add package
        #
        # Note: candle.exe emits a warning if we manually assigns an Id (e.g.,
        # wix.dynamicGuid("Package/Id")), which is why we use "*" here.
        #
        self.package = self.product.createChild("Package", [
            ("Id", "*"),
            ("Keywords", "Installer"),
            ("Description", "Installer of " + name + " " + version),
            ("Manufacturer", manufacturer),
            ("InstallerVersion", "500"),
            ("Languages", "1033"),
            ("Compressed", "yes"),
            ("SummaryCodepage", "1252")])

        # Add media
        self.media = self.product.createChild("Media", [
            ("Id", "1"),
            ("Cabinet", "Cabinet.cab"),
            ("EmbedCab", "yes")])

        # Add basic directory structure. As far as I understand, a lot of these
        # Name and Id attribute are "magic names" recognized by either WiX or
        # Windows Installer, and can't be changed.
        self.targetDirectory = self.product.createDirectory("SourceDir", "TARGETDIR")
        self.programFilesDirectory = self.targetDirectory.createDirectory("PFiles", "ProgramFilesFolder")
        self.manufacturerDirectory = self.programFilesDirectory.createDirectory(manufacturer)
        self.installDirectory = self.manufacturerDirectory.createDirectory(name, "INSTALLDIR")
        self.startupMenuDirectory = self.targetDirectory.createDirectory("Programs", "ProgramMenuFolder")
        self.desktopDirectory = self.targetDirectory.createDirectory("Desktop", "DesktopFolder")


    # Generates a deterministic GUID based on the current productName,
    # productVersion, and given string identifier "sid". This GUID
    # changes from version to version even if the productName and sid
    # don't change.
    #
    def dynamicGuid(self, sid):
        u = uuid.uuid5(uuid.NAMESPACE_URL,
                  "http://dynamicguid.wix.vgc.io" +
                  "/" + self.name +
                  "/" + self.version +
                  "/" + sid)
        return str(u).upper()

    # Generates a deterministic GUID based on the current productName and
    # given string identifier "sid". This GUID is unchanged from version to
    # version as long as the productName and sid don't change.
    #
    def staticGuid(self, sid):
        u = uuid.uuid5(uuid.NAMESPACE_URL,
                  "http://staticguid.wix.vgc.io" +
                  "/" + self.name +
                  "/" + sid)
        return str(u).upper()

    # Writes XML document to file.
    #
    def write(self, filename):
        f = open(filename, "wb+")
        f.write(self.domDocument.toprettyxml(encoding='windows-1252'))
        f.close()

    # Creates a new feature. Note: feature names cannot be longer than 38 characters in length.
    #
    def createFeature(self, name, level = 1):
        return self.product.createChild("Feature", [
            ("Id", name),
            ("Level", str(level))])

    # Creates a new icon.
    #
    def createIcon(self, filename):
        # Note: icon Ids must end with either .ico or .exe
        # and match the extension of the filename.
        iconId = encodeId("Icon" + filename) + filename[-4:]
        icon = self.product.createChild("Icon", [
            ("Id", iconId),
            ("SourceFile", filename)])
        icon.iconId = iconId
        return icon

# A WixElement represents an XML element in the WiX file.
# It is a wrapper around dom.Element providing more convenient API.
#
class WixElement:

    # Wraps a dom.Element into a WixElement. This is an implementation detail,
    # clients are not supposed to call this themselves, but instead to use the
    # WixElement.createChild() function.
    #
    def __init__(self, domElement, wix, dirId):
        self.domElement = domElement
        self.wix = wix
        self.dirId = dirId

    # Sets the attribute of this WixElement
    #
    def setAttribute(self, name, value):
         self.domElement.setAttribute(name, value)

    # Gets the value of the given attribute of this WixElement
    #
    def getAttribute(self, name):
         self.domElement.getAttribute(name)

    # Creates a new Element with the given tagName, and appends this new
    # Element as a child of the given parent Element. Returns the new Element.
    #
    def createChild(self, tagName, attributes):
        domChild = self.wix.domDocument.createElement(tagName)
        self.domElement.appendChild(domChild)
        child = WixElement(domChild, self.wix, self.dirId)
        for pair in attributes:
            child.setAttribute(pair[0], pair[1])
        return child

    # Creates a new Directory with the given name and the given ID.
    # If no ID is provided, one will be automatically generated.
    #
    def createDirectory(self, name, dirId = None):
        if dirId is None:
            dirId = encodeId(self.dirId + '/' + name)
        child = self.createChild("Directory", [("Id", dirId), ("Name", name)])
        child.dirId = dirId
        return child

    # Creates a shortcut to this file using the given icon
    #
    def createShortcut(self, directory, name, icon, workingDirectory = None):
        if workingDirectory is None:
            workingDirectory = self.wix.installDirectory
        return self.createChild("Shortcut", [
            ("Id", encodeId("Shortcut" + directory.dirId + "/" + name)),
            ("Directory", directory.dirId),
            ("Name", name),
            ("WorkingDirectory", workingDirectory.dirId),
            ("Icon", icon.iconId),
            ("IconIndex", "0"),
            ("Advertise", "yes")])

    # Creates a submenu of the startup menu.
    # It has to be associated with a feature so that it is deleted when the
    # feature is uninstalled.
    #
    def createSubMenu(self, name, feature):
        subMenuDirectory = self.createDirectory(name)
        componentId = encodeId("SubMenuComponent" + subMenuDirectory.dirId)
        subMenuComponent = subMenuDirectory.createChild("Component", [
            ("Id", componentId),
            ("Guid", self.wix.staticGuid(componentId))])
        subMenuComponent.createChild("RemoveFolder", [
            ("Id", encodeId("RemoveFolder" + componentId)),
            ("On", "uninstall")])
        subMenuComponent.createChild("RegistryValue", [
            ("Root", "HKCU"),
            ("Key", "Software\\[Manufacturer]\\[ProductName]"),
            ("Type", "string"),
            ("Value", ""),
            ("KeyPath", "yes")])
        feature.createChild("ComponentRef", [("Id", componentId)])
        return subMenuDirectory

    # Creates a file.
    #
    def createFile(self, sourcePath, name, feature):
        componentId = encodeId("FileComponent" + self.dirId + "/" + name)
        fileComponent = self.createChild("Component", [
            ("Id", componentId),
            ("Guid", self.wix.staticGuid(componentId))])
        file = fileComponent.createChild("File", [
            ("Id", encodeId("File" + componentId)),
            ("Name", name),
            ("DiskId", "1"),
            ("Source", self.wix.sourceDir + sourcePath),
            ("KeyPath", "yes")])
        feature.createChild("ComponentRef", [("Id", componentId)])
        return file

# Generates an MSI file from the build
#
def deploy(config, wixDir, qtDir):

    # Create deploy directory
    deployDir = config + "/deploy"
    pathlib.Path(deployDir).mkdir(parents = True, exist_ok = True)

    # general configuration
    productName = "VGC Illustration Daily Beta"
    version = "19.5.27.1"
    manufacturer = "VGC Software"
    sourceDir = "..\\..\\"
    wix = Wix(productName, version, manufacturer, sourceDir)
    feature = wix.createFeature("Complete")

    # Add executable
    binDirectory = wix.installDirectory.createDirectory("bin")
    exeFilename = "vgcillustration.exe"
    exeSourcePath = config + "\\bin\\" + exeFilename
    exeFile = binDirectory.createFile(exeSourcePath, exeFilename, feature)

    # Add shortcuts to executable
    icon = wix.createIcon("vgcillustration.ico")
    vgcMenuDirectory = wix.startupMenuDirectory.createSubMenu(productName, feature)
    exeFile.createShortcut(vgcMenuDirectory, productName, icon)
    exeFile.createShortcut(wix.desktopDirectory, productName, icon)

    # Add DLLs
    libsDir = 'libs/vgc'
    for libName in os.listdir(libsDir):
        libPath = libsDir + '/' + libName
        if os.path.isdir(libPath) and libName != "CMakeFiles":
            dllFilename = "vgc" + libName + ".dll"
            sourcePath = config + "\\bin\\" + dllFilename
            binDirectory.createFile(sourcePath, dllFilename, feature)

    # Add resources
    libsDir = 'libs/vgc'
    resourcesDirectory = wix.installDirectory.createDirectory("resources")
    for libName in os.listdir(libsDir):
        libPath = libsDir + '/' + libName
        if os.path.isdir(libPath) and libName != "CMakeFiles":
            file = open(libPath + "/resources.txt", "r")
            resources = file.read()
            file.close()
            if resources != "":
                libResourcesDirectory = resourcesDirectory.createDirectory(libName)
                allSubdirs = {}
                resources = resources.split(";")
                for resource in resources:
                    subdirs = resource.split("/")
                    filename = subdirs[len(subdirs)-1]
                    subdirs = subdirs[:-1]
                    resourceDir = libResourcesDirectory
                    relPath = ""
                    for subdir in subdirs:
                        relPath += "/" + subdir
                        if relPath in allSubdirs:
                            resourceDir = allSubdirs[relPath]
                        else:
                            resourceDir = resourceDir.createDirectory(subdir)
                            allSubdirs[relPath] = resourceDir
                    sourcePath = "resources/" + libName + "/" + resource
                    sourcePath = sourcePath.replace("/", "\\")
                    resourceDir.createFile(sourcePath, filename, feature)

    # Run windeployqt.exe to generate Qt dependencies
    subprocess.run(qtDir + "/bin/windeployqt.exe " + exeSourcePath)

    # TODO: install in 'Program Files' instead of in 'Program Files (x86)'
    # TODO: add Qt dependencies to WiX
    # TODO: add Python to WiX
    # TODO: implement Gui
    # TODO: bundle in a .exe that runs vs_redist.x64.exe if required

    # Write to file
    basename = "vgcillustration"
    wxsFilepath = deployDir + "/" + basename + ".wxs"
    wix.write(wxsFilepath)

    # Compile into an MSI with WiX
    #
    # - Why -sice:ICE07? Because otherwise I have warnings regarding font files, same as:
    #   https://stackoverflow.com/questions/13052258/installing-a-font-with-wix-not-to-the-local-font-folder
    #
    wixobjFilepath = deployDir + "/" + basename + ".wixobj"
    msiFilepath = deployDir + "/" + basename + ".msi"
    subprocess.run(wixDir + "/bin/candle.exe " + wxsFilepath + " -out " + wixobjFilepath)
    subprocess.run(wixDir + "/bin/light.exe -sice:ICE07 -sice:ICE60 " + wixobjFilepath + " -out " + msiFilepath)
