name: macOS

on: [push, pull_request]

env:
  BUILD_TYPE: Release
  QT_VERSION: 5.15.2
  PYTHON_VERSION: 3.7
  PARALLEL_JOBS: 5
  MACOSX_DEPLOYMENT_TARGET: 10.13

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build
    runs-on: macos-12
    outputs:
      version-name: ${{steps.deploy.outputs.version-name}}
      artifacts-name: ${{steps.artifacts.outputs.name}}

    steps:
    - uses: actions/checkout@v4
      with:
        # We need to fetch more than one commit to get the correct build name
        fetch-depth: 100
        submodules: 'recursive'

    - name: Print git log
      run: git log

    # In case of a push event, the commit we care about is simply HEAD.
    # The current branch name can be found by parsing GITHUB_REF, for example,
    # if we are on the master branch, then GITHUB_REF = refs/heads/master.
    - name: Get commit branch and commit message
      if: github.event_name == 'push'
      run: |
        echo "COMMIT_BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # In case of a pull_request event, the commit we care about is HEAD^2, that
    # is, the second parent of the pull request merge commit.
    # The current branch name is directly given by GITHUB_HEAD_REF
    - name: Get commit branch and commit message
      if: github.event_name == 'pull_request'
      run: |
        echo "COMMIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables
    - name: Print useful environment variables
      if:
      run: |
        echo "GITHUB_WORKFLOW:      $GITHUB_WORKFLOW"
        echo "GITHUB_RUN_ID:        $GITHUB_RUN_ID"
        echo "GITHUB_RUN_NUMBER:    $GITHUB_RUN_NUMBER"
        echo "GITHUB_ACTION:        $GITHUB_ACTION"
        echo "GITHUB_ACTIONS:       $GITHUB_ACTIONS"
        echo "GITHUB_ACTOR:         $GITHUB_ACTOR"
        echo "GITHUB_REPOSITORY:    $GITHUB_REPOSITORY"
        echo "GITHUB_EVENT_NAME:    $GITHUB_EVENT_NAME"
        echo "GITHUB_EVENT_PATH:    $GITHUB_EVENT_PATH"
        echo "GITHUB_WORKSPACE:     $GITHUB_WORKSPACE"
        echo "GITHUB_SHA:           $GITHUB_SHA"
        echo "GITHUB_REF:           $GITHUB_REF"
        echo "GITHUB_HEAD_REF:      $GITHUB_HEAD_REF"
        echo "GITHUB_BASE_REF:      $GITHUB_BASE_REF"
        echo "GITHUB_SERVER_URL:    $GITHUB_SERVER_URL"
        echo "GITHUB_API_URL:       $GITHUB_API_URL"
        echo "GITHUB_GRAPHQL_URL:   $GITHUB_GRAPHQL_URL"
        echo "COMMIT_BRANCH:        $COMMIT_BRANCH"
        echo "COMMIT_MESSAGE:       $COMMIT_MESSAGE"

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{env.PYTHON_VERSION}}
        architecture: 'x64'

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION}}
        setup-python: false

    - name: Install other dependencies
      working-directory: ${{github.workspace}}
      run: |
        brew install freetype
        brew install harfbuzz
        pip install dmgbuild

    - name: Configure
      working-directory: ${{github.workspace}}
      run: |
        mkdir build
        cd build
        cmake --version
        cmake .. \
          -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
          -DVGC_COMMIT_BRANCH="$COMMIT_BRANCH" \
          -DPython_ROOT_DIR="$pythonLocation" \
          -DQt5_DIR="$GITHUB_WORKSPACE/Qt/$QT_VERSION/clang_64/lib/cmake/Qt5" \
          -DVGC_PEDANTIC=ON -DVGC_WERROR=ON

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --parallel $PARALLEL_JOBS

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --target check --parallel $PARALLEL_JOBS

    - name: Deploy
      id: deploy
      working-directory: ${{github.workspace}}/build
      run: |
        cmake --build . --target deploy --parallel $PARALLEL_JOBS
        versionName=VGC-$(awk -F "=" '/versionName/ {print $2}' $BUILD_TYPE/resources/core/version.txt)
        versionName=$(echo $versionName | tr " " "-")
        echo "version-name=$versionName" >> "$GITHUB_OUTPUT"

    - name: Prepare Artifacts
      id: artifacts
      working-directory: ${{github.workspace}}
      env:
        VERSION_NAME: ${{steps.deploy.outputs.version-name}}
      run: |
        mkdir artifacts
        cp build/deploy/$BUILD_TYPE/info.json artifacts
        cp build/deploy/$BUILD_TYPE/VGC*.dmg artifacts
        name=$VERSION_NAME-macOS
        echo "name=$name" >> "$GITHUB_OUTPUT"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        path: artifacts
        name: ${{steps.artifacts.outputs.name}}

  upload-vgc:
    name: Upload
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.repository == 'vgc/vgc' }}
    steps:

    # Note: this must be done before cache/restore,
    # otherwise checkout deletes the dowloaded artifacts
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
        submodules: false # We only need tools/upload_deploy_info.py

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        name: ${{needs.build.outputs.artifacts-name}}

    # The file info.json is specific to this platform/workflow and shouldn't be uploaded
    - name: Move info.json
      run: mv artifacts/info.json .

    - name: Get Azure Info
      id: get-azure-info
      env:
        AZURE_CREDENTIALS_RELEASES: ${{secrets.AZURE_CREDENTIALS_RELEASES}}
        VERSION_NAME: ${{needs.build.outputs.version-name}}
      run: |
        if [ $GITHUB_EVENT_NAME == 'pull_request' ]; then \
          echo "credentials<<EOF" >> $GITHUB_OUTPUT; \
          SCOPE="releases-prs"; \
          curl "https://api.vgc.io/azure-credentials?scope=$SCOPE" >> $GITHUB_OUTPUT; \
          echo "EOF" >> $GITHUB_OUTPUT; \
          echo "destination=prs" >> "$GITHUB_OUTPUT"; \
        elif [ $GITHUB_EVENT_NAME == 'push' ]; then \
          echo "credentials<<EOF" >> $GITHUB_OUTPUT; \
          echo "$AZURE_CREDENTIALS_RELEASES" >> $GITHUB_OUTPUT; \
          echo "EOF" >> $GITHUB_OUTPUT; \
          echo "destination=alpha" >> "$GITHUB_OUTPUT"; \
        fi
        echo "version-name=$VERSION_NAME" >> "$GITHUB_OUTPUT"

    - name: Log in with Azure
      uses: azure/login@v2
      with:
        creds: ${{steps.get-azure-info.outputs.credentials}}

    - name: Upload to Azure
      uses: azure/cli@v2
      env:
        DESTINATION: ${{steps.get-azure-info.outputs.destination}}
        VERSION_NAME: ${{steps.get-azure-info.outputs.version-name}}
      with:
        azcliversion: latest
        inlineScript: |
          az storage blob upload-batch \
            --account-name vgcreleases \
            --destination $DESTINATION \
            --destination-path $VERSION_NAME \
            --source artifacts \
            --auth-mode login

    - name: Upload Deploy Info to VGC Website
      env:
        VGC_GITHUB_KEY: ${{secrets.VGC_GITHUB_KEY}}
        DESTINATION: ${{steps.get-azure-info.outputs.destination}}
        VERSION_NAME: ${{steps.get-azure-info.outputs.version-name}}
        STORAGE_URL: https://vgcreleases.blob.core.windows.net
      run: |
        mv info.json artifacts
        python3 tools/upload_deploy_info.py \
          artifacts/info.json \
          "$STORAGE_URL/$DESTINATION/$VERSION_NAME"
