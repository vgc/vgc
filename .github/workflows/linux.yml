name: Linux

on: [push, pull_request]

env:
  CONTAINER: vgcsoftware/vgc-ci-ubuntu-18.04:2023-03-08.0
  BUILD_TYPE: Release
  QT_VERSION: 5.12.5
  PARALLEL_JOBS: 5

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04
    outputs:
      version-name: ${{steps.deploy.outputs.version-name}}
      artifacts-name: ${{steps.artifacts.outputs.name}}

    steps:

    # By default, actions/checkout will only check out the last commit. For
    # pull requests, this is a temporary merge commit used to test integration
    # against the master branch. Therefore, in order to get the actual commit
    # message we are interested in, we need to fetch more than one commit.
    # Getting more commits can also be helpful for computing human-readable
    # commit ID, such as 2020-12-16.3 for the 4th commit of the day.
    #
    - uses: actions/checkout@v4
      with:
        fetch-depth: 100
        submodules: 'recursive'

    - name: Print git log
      run: git log

    # In case of a push event, the commit we care about is simply HEAD.
    # The current branch name can be found by parsing GITHUB_REF, for example,
    # if we are on the master branch, then GITHUB_REF = refs/heads/master.
    #
    - name: Get commit branch and commit message
      if: github.event_name == 'push'
      run: |
        echo "COMMIT_BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # In case of a pull_request event, the commit we care about is HEAD^2, that
    # is, the second parent of the pull request merge commit.
    # The current branch name is directly given by GITHUB_HEAD_REF
    #
    - name: Get commit branch and commit message
      if: github.event_name == 'pull_request'
      run: |
        echo "COMMIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables
    #
    - name: Print useful environment variables
      if:
      run: |
        echo "GITHUB_WORKFLOW:      $GITHUB_WORKFLOW"
        echo "GITHUB_RUN_ID:        $GITHUB_RUN_ID"
        echo "GITHUB_RUN_NUMBER:    $GITHUB_RUN_NUMBER"
        echo "GITHUB_ACTION:        $GITHUB_ACTION"
        echo "GITHUB_ACTIONS:       $GITHUB_ACTIONS"
        echo "GITHUB_ACTOR:         $GITHUB_ACTOR"
        echo "GITHUB_REPOSITORY:    $GITHUB_REPOSITORY"
        echo "GITHUB_EVENT_NAME:    $GITHUB_EVENT_NAME"
        echo "GITHUB_EVENT_PATH:    $GITHUB_EVENT_PATH"
        echo "GITHUB_WORKSPACE:     $GITHUB_WORKSPACE"
        echo "GITHUB_SHA:           $GITHUB_SHA"
        echo "GITHUB_REF:           $GITHUB_REF"
        echo "GITHUB_HEAD_REF:      $GITHUB_HEAD_REF"
        echo "GITHUB_BASE_REF:      $GITHUB_BASE_REF"
        echo "GITHUB_SERVER_URL:    $GITHUB_SERVER_URL"
        echo "GITHUB_API_URL:       $GITHUB_API_URL"
        echo "GITHUB_GRAPHQL_URL:   $GITHUB_GRAPHQL_URL"
        echo "COMMIT_BRANCH:        $COMMIT_BRANCH"
        echo "COMMIT_MESSAGE:       $COMMIT_MESSAGE"

    # We manually start a container and execute scripts in it instead of using `jobs.build.container`,
    # otherwise we couldn't use GitHub-provided actions (checkout, upload-artifact, etc.) as they rely
    # on Node 20 which would not necessarily be available on some containers (e.g., Ubuntu 18.04).
    #
    # See: https://github.com/actions/checkout/issues/1590
    #
    - name: Start Docker Container
      run: |
        docker pull $CONTAINER
        docker run --name build-container -d -v ${{ github.workspace }}:/workspace $CONTAINER tail -f /dev/null

    - name: Configure
      env:
        SCRIPT: |
          cd /workspace && mkdir build && cd build
          cmake --version
          cmake .. \
            -DCMAKE_BUILD_TYPE="${{env.BUILD_TYPE}}" \
            -DVGC_COMMIT_BRANCH="${{env.COMMIT_BRANCH}}" \
            -DQt5_DIR="/opt/qt/${{env.QT_VERSION}}/gcc_64/lib/cmake/Qt5" \
            -DVGC_PEDANTIC=ON \
            -DVGC_WERROR=ON
      run: docker exec build-container bash -c "$SCRIPT"

    - name: Build
      env:
        SCRIPT: |
          cd /workspace/build
          cmake --build . --parallel ${{env.PARALLEL_JOBS}}
      run: docker exec build-container bash -c "$SCRIPT"

    - name: Test
      env:
        SCRIPT: |
          cd /workspace/build
          cmake --build . --target check --parallel ${{env.PARALLEL_JOBS}}
      run: docker exec build-container bash -c "$SCRIPT"

    - name: Deploy
      id: deploy
      working-directory: ${{github.workspace}}/build
      env:
        SCRIPT: |
          cd /workspace/build
          cmake --build . --target deploy --parallel ${{env.PARALLEL_JOBS}}
      run: |
        docker exec build-container bash -c "$SCRIPT"
        versionName=VGC-$(awk -F "=" '/versionName/ {print $2}' $BUILD_TYPE/resources/core/version.txt)
        versionName=$(echo $versionName | tr " " "-")
        echo "version-name=$versionName" >> "$GITHUB_OUTPUT"

    - name: Prepare Artifacts
      id: artifacts
      working-directory: ${{github.workspace}}
      env:
        VERSION_NAME: ${{steps.deploy.outputs.version-name}}
      run: |
        mkdir artifacts
        cp build/deploy/$BUILD_TYPE/info.json artifacts
        cp build/deploy/$BUILD_TYPE/vgc*.AppImage artifacts
        name=$VERSION_NAME-Linux
        echo "name=$name" >> "$GITHUB_OUTPUT"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        path: artifacts
        name: ${{steps.artifacts.outputs.name}}

  upload-vgc:
    name: Upload
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.repository == 'vgc/vgc' }}
    steps:

    # Note: this must be done before cache/restore,
    # otherwise checkout deletes the dowloaded artifacts
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
        submodules: false # We only need tools/upload_deploy_info.py

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        name: ${{needs.build.outputs.artifacts-name}}

    # The file info.json is specific to this platform/workflow and shouldn't be uploaded
    - name: Move info.json
      run: mv artifacts/info.json .

    - name: Get Azure Info
      id: get-azure-info
      env:
        AZURE_CREDENTIALS_RELEASES: ${{secrets.AZURE_CREDENTIALS_RELEASES}}
        VERSION_NAME: ${{needs.build.outputs.version-name}}
      run: |
        if [ $GITHUB_EVENT_NAME == 'pull_request' ]; then \
          echo "credentials<<EOF" >> $GITHUB_OUTPUT; \
          SCOPE="releases-prs"; \
          curl "https://api.vgc.io/azure-credentials?scope=$SCOPE" >> $GITHUB_OUTPUT; \
          echo "EOF" >> $GITHUB_OUTPUT; \
          echo "destination=prs" >> "$GITHUB_OUTPUT"; \
        elif [ $GITHUB_EVENT_NAME == 'push' ]; then \
          echo "credentials<<EOF" >> $GITHUB_OUTPUT; \
          echo "$AZURE_CREDENTIALS_RELEASES" >> $GITHUB_OUTPUT; \
          echo "EOF" >> $GITHUB_OUTPUT; \
          echo "destination=alpha" >> "$GITHUB_OUTPUT"; \
        fi
        echo "version-name=$VERSION_NAME" >> "$GITHUB_OUTPUT"

    - name: Log in with Azure
      uses: azure/login@v2
      with:
        creds: ${{steps.get-azure-info.outputs.credentials}}

    - name: Upload to Azure
      uses: azure/cli@v2
      env:
        DESTINATION: ${{steps.get-azure-info.outputs.destination}}
        VERSION_NAME: ${{steps.get-azure-info.outputs.version-name}}
      with:
        azcliversion: latest
        inlineScript: |
          az storage blob upload-batch \
            --account-name vgcreleases \
            --destination $DESTINATION \
            --destination-path $VERSION_NAME \
            --source artifacts \
            --auth-mode login

    - name: Upload Deploy Info to VGC Website
      env:
        VGC_GITHUB_KEY: ${{secrets.VGC_GITHUB_KEY}}
        DESTINATION: ${{steps.get-azure-info.outputs.destination}}
        VERSION_NAME: ${{steps.get-azure-info.outputs.version-name}}
        STORAGE_URL: https://vgcreleases.blob.core.windows.net
      run: |
        mv info.json artifacts
        python3 tools/upload_deploy_info.py \
          artifacts/info.json \
          "$STORAGE_URL/$DESTINATION/$VERSION_NAME"
