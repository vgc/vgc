name: Linux Build

on: [push, pull_request]

env:
  BUILD_TYPE: Release
  QT_VERSION: 5.12.5
  PYTHON_VERSION: 3.7
  PARALLEL_JOBS: 5

jobs:
  build:
    runs-on: ubuntu-latest
    container: ubuntu:18.04

    steps:

    - name: Install Ubuntu-provided dependencies
      run: |
        apt update
        apt install -y gpg wget software-properties-common build-essential
        apt install -y libfreetype6-dev
        apt install -y libharfbuzz-dev
        apt install -y libgl1-mesa-dev    # For QtGui
        apt install -y libxkbcommon-x11-0 # For Qt plugins/platforms/libqxcb.so
        apt install -y libfontconfig1     # For Qt plugins/platforms/libqxcb.so
        apt install -y libxrender1        # For Qt plugins/platforms/libqxcb.so

    - name: Install and Configure Recent Git
      run: |
        add-apt-repository ppa:git-core/ppa
        apt install -y git
        git config --global --add safe.directory `pwd` # Fix "fatal: detected dubious ownership in repository at '/__w/<user>/<repo>'""

    # See documentation at:
    # - https://apt.kitware.com/
    # - https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line
    #
    - name: Install Recent CMake
      run: |
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6AF7F09730B3F0A4
        apt-add-repository "deb https://apt.kitware.com/ubuntu/ bionic main"
        apt install -y cmake

    # By default, actions/checkout will only check out the last commit. For
    # pull requests, this is a temporary merge commit used to test integration
    # against the master branch. Therefore, in order to get the actual commit
    # message we are interested in, we need to fetch more than one commit.
    # Getting more commits can also be helpful for computing human-readable
    # commit ID, such as 2020-12-16.3 for the 4th commit of the day.
    #
    - uses: actions/checkout@v2
      with:
        fetch-depth: 100
        submodules: 'recursive'

    - name: Print git log
      run: git log

    # In case of a push event, the commit we care about is simply HEAD.
    # The current branch name can be found by parsing GITHUB_REF, for example,
    # if we are on the master branch, then GITHUB_REF = refs/heads/master.
    #
    - name: Get commit branch and commit message
      if: github.event_name == 'push'
      run: |
        echo "COMMIT_BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # In case of a pull_request event, the commit we care about is HEAD^2, that
    # is, the second parent of the pull request merge commit.
    # The current branch name is directly given by GITHUB_HEAD_REF
    #
    - name: Get commit branch and commit message
      if: github.event_name == 'pull_request'
      run: |
        echo "COMMIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables
    #
    # Note: in a Docker container, we have:
    # - ${{github.workspace}} = /home/runner/work/test-cpp-github-actions/test-cpp-github-actions
    # - $GITHUB_WORKSPACE     = /__w/test-cpp-github-actions/test-cpp-github-actions
    #
    # It's best to use ${{github.workspace}} in `working-directory`, and $GITHUB_WORKSPACE in `run`
    #
    - name: Print useful environment variables
      if:
      run: |
        echo "GITHUB_WORKFLOW:      $GITHUB_WORKFLOW"
        echo "GITHUB_RUN_ID:        $GITHUB_RUN_ID"
        echo "GITHUB_RUN_NUMBER:    $GITHUB_RUN_NUMBER"
        echo "GITHUB_ACTION:        $GITHUB_ACTION"
        echo "GITHUB_ACTIONS:       $GITHUB_ACTIONS"
        echo "GITHUB_ACTOR:         $GITHUB_ACTOR"
        echo "GITHUB_REPOSITORY:    $GITHUB_REPOSITORY"
        echo "GITHUB_EVENT_NAME:    $GITHUB_EVENT_NAME"
        echo "GITHUB_EVENT_PATH:    $GITHUB_EVENT_PATH"
        echo "GITHUB_WORKSPACE:     $GITHUB_WORKSPACE"
        echo "GITHUB_SHA:           $GITHUB_SHA"
        echo "GITHUB_REF:           $GITHUB_REF"
        echo "GITHUB_HEAD_REF:      $GITHUB_HEAD_REF"
        echo "GITHUB_BASE_REF:      $GITHUB_BASE_REF"
        echo "GITHUB_SERVER_URL:    $GITHUB_SERVER_URL"
        echo "GITHUB_API_URL:       $GITHUB_API_URL"
        echo "GITHUB_GRAPHQL_URL:   $GITHUB_GRAPHQL_URL"
        echo "COMMIT_BRANCH:        $COMMIT_BRANCH"
        echo "COMMIT_MESSAGE:       $COMMIT_MESSAGE"

    - name: Install Python
      run: |
        add-apt-repository ppa:deadsnakes/ppa && \
        apt install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-dev python${PYTHON_VERSION}-distutils && \
        update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 && \
        update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 2

    - name: Install Qt
      run: |
        wget --progress=dot:giga https://www.vgc.io/releases/qt/opt-qt-$QT_VERSION-gcc_64.tar.gz
        tar -xzf opt-qt-$QT_VERSION-gcc_64.tar.gz -C "$GITHUB_WORKSPACE"

    - name: Configure
      working-directory: ${{github.workspace}}
      run: |
        mkdir build
        cd build
        cmake --version
        cmake .. -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DVGC_COMMIT_BRANCH="$COMMIT_BRANCH" -DQt5_DIR="$GITHUB_WORKSPACE/qt/$QT_VERSION/gcc_64/lib/cmake/Qt5" -DVGC_PEDANTIC=ON -DVGC_WERROR=ON

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --parallel $PARALLEL_JOBS

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --target check --parallel $PARALLEL_JOBS

    - name: Deploy
      working-directory: ${{github.workspace}}/build
      env:
        VGC_GITHUB_KEY: ${{secrets.VGC_GITHUB_KEY}}
      run: |
        export APPIMAGE_EXTRACT_AND_RUN=1 # Needed for running AppImages within Docker containers
        cmake --build . --target deploy --parallel $PARALLEL_JOBS
